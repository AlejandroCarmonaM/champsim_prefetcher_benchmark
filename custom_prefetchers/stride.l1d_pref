#include "cache.h"

#define STRIDE_TABLE_SIZE 2048
struct StrideEntry {
    uint64_t ip; // Instruction PC 
    uint64_t last_cl_addr; // Last cache line (block) accessed by this Instruction
    int64_t last_stride; // Last detected stride (other than 0)
};
static StrideEntry stride_table[STRIDE_TABLE_SIZE];
void CACHE::l1d_prefetcher_initialize()
{
    for(int i = 0; i < STRIDE_TABLE_SIZE; i++){
        stride_table[i].ip = 0;
        stride_table[i].last_cl_addr = 0;
        stride_table[i].last_stride = 0;
    }
}
void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type)
{
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE; // cache line address
    int index = -1;
    // find the IP in the table
    for(int i = 0; i < STRIDE_TABLE_SIZE; i++){
        if(stride_table[i].ip == ip){
            index = i;
            break;
        }
    }
    // Allocate a new entry if not found
    if(index == -1){
        // find empty slot
        for(int i = 0; i < STRIDE_TABLE_SIZE; i++){
            if(stride_table[i].ip == 0){
                index = i;
                stride_table[i].ip = ip;
                stride_table[i].last_cl_addr = cl_addr;
                stride_table[i].last_stride = 0;
                break; // There was a empty slot, so we fill the slot and return (no prefetching)
            }
        }
        return; // No empty slot, so we return without prefetching
    }
    // Calculate the stride between the last two cache lines
    int64_t stride = (int64_t)cl_addr - (int64_t)stride_table[index].last_cl_addr;
    // If stride is 0, just update the last cache line address
    if(stride == 0){
        // same block, just update
        return;
    }
    // If stride is the same as the last stride, prefetch the next line
    if(stride == stride_table[index].last_stride){
        // issue prefetch
        uint64_t next_addr = addr + (stride << LOG2_BLOCK_SIZE);
        if((next_addr >> LOG2_PAGE_SIZE) == (addr >> LOG2_PAGE_SIZE)){
            prefetch_line(ip, addr, next_addr, FILL_L1, 0);
        }
    }
    // Update the stride table entry
    stride_table[index].last_cl_addr = cl_addr;
    stride_table[index].last_stride = stride;
}

void CACHE::l1d_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
    // no action needed
}

void CACHE::l1d_prefetcher_final_stats()
{
    // no action needed
}